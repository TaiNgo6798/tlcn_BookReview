{"version":3,"sources":["pages lazy /^/.*$/ groupOptions: {} namespace object","configs/routers/index.js","App.js","serviceWorker.js","reducers/index.js","reducers/postReducer.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","routers","exact","path","component","App","props","fallback","route","idx","key","render","Component","React","lazy","to","Boolean","window","location","hostname","match","allReducer","combineReducers","postReducer","state","action","type","payload","v","push","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wLAAA,IAAIA,EAAM,CACT,UAAW,CACV,GACA,EACA,EACA,EACA,EACA,EACA,GAED,WAAY,CACX,GACA,EACA,EACA,EACA,EACA,EACA,GAED,sBAAuB,CACtB,GACA,EACA,EACA,EACA,EACA,GAED,yBAA0B,CACzB,GACA,EACA,EACA,EACA,EACA,GAED,gBAAiB,CAChB,GACA,EACA,EACA,EACA,EACA,EACA,GAED,mBAAoB,CACnB,GACA,EACA,EACA,EACA,EACA,EACA,GAED,qBAAsB,CACrB,GACA,EACA,IAED,wBAAyB,CACxB,GACA,EACA,EACA,EACA,GAED,2BAA4B,CAC3B,GACA,EACA,EACA,EACA,GAED,aAAc,CACb,GACA,EACA,EACA,EACA,EACA,EACA,GAED,cAAe,CACd,GACA,EACA,EACA,EACA,EACA,EACA,GAED,mBAAoB,CACnB,GACA,EACA,EACA,EACA,EACA,EACA,GAED,sBAAuB,CACtB,GACA,EACA,EACA,EACA,EACA,EACA,GAED,wBAAyB,CACxB,GACA,EACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAON,QAAQQ,IAAIF,EAAIG,MAAM,GAAGd,IAAIG,EAAoBK,IAAID,MAAK,WAChE,OAAOJ,EAAoBY,EAAEH,EAAID,EAAI,OAGvCV,EAAoBe,KAAO,WAC1B,OAAOC,OAAOD,KAAKhB,IAEpBC,EAAoBW,GAAK,GACzBM,EAAOC,QAAUlB,G,mGCnIJmB,EAAU,CACrB,CACEC,OAAO,EACPC,KAAM,SACNC,UAAW,SAEb,CACEF,OAAO,EACPC,KAAM,IACNC,UAAW,SAEb,CACEF,OAAO,EACPC,KAAM,YACNC,UAAW,aCmBAC,G,MAvBH,SAACC,GACX,OACE,kBAAC,WAAD,CAAUC,SAAU,4CAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGN,EAAQpB,KAAI,SAAC2B,EAAOC,GAAR,OACX,kBAAC,IAAD,CACEC,IAAKD,EACLP,MAAOM,EAAMN,MACbC,KAAMK,EAAML,KACZQ,OAAQ,WACN,IAAMC,EAAYC,IAAMC,MAAK,kBAAM,MAAO,YAAWN,EAAMJ,eAC3D,OAAO,kBAACQ,EAAD,YAIb,kBAAC,IAAD,CAAUG,GAAG,WCfLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCXSC,EAJIC,YAAgB,CACjCC,YCHa,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACrC,OAAQA,EAAOC,MACb,IAAK,UAEH,OADAF,EAAQC,EAAOE,QAEjB,IAAK,WACHF,EAAOE,QAAQ9C,KAAI,SAAA+C,GACjBJ,EAAMK,KAAKD,MAEbJ,EAAK,YAAOA,GACd,QACE,OAAOA,M,QCDPM,EAAQC,YAAYV,GAE1BW,IAASrB,OACP,kBAAC,IAAD,CAAUmB,MAAOA,GACf,kBAAC,EAAD,OAEFG,SAASC,eAAe,SHgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,kB","file":"static/js/main.c6fcd825.chunk.js","sourcesContent":["var map = {\n\t\"./login\": [\n\t\t14,\n\t\t9,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t2,\n\t\t6\n\t],\n\t\"./login/\": [\n\t\t14,\n\t\t9,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t2,\n\t\t6\n\t],\n\t\"./login/forgot-form\": [\n\t\t26,\n\t\t9,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t8\n\t],\n\t\"./login/forgot-form.js\": [\n\t\t26,\n\t\t9,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t8\n\t],\n\t\"./login/index\": [\n\t\t14,\n\t\t9,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t2,\n\t\t6\n\t],\n\t\"./login/index.js\": [\n\t\t14,\n\t\t9,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t2,\n\t\t6\n\t],\n\t\"./login/index.scss\": [\n\t\t41,\n\t\t7,\n\t\t12\n\t],\n\t\"./login/register-form\": [\n\t\t27,\n\t\t9,\n\t\t0,\n\t\t3,\n\t\t7\n\t],\n\t\"./login/register-form.js\": [\n\t\t27,\n\t\t9,\n\t\t0,\n\t\t3,\n\t\t7\n\t],\n\t\"./newsFeed\": [\n\t\t13,\n\t\t9,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t4,\n\t\t5\n\t],\n\t\"./newsFeed/\": [\n\t\t13,\n\t\t9,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t4,\n\t\t5\n\t],\n\t\"./newsFeed/index\": [\n\t\t13,\n\t\t9,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t4,\n\t\t5\n\t],\n\t\"./newsFeed/index.js\": [\n\t\t13,\n\t\t9,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t4,\n\t\t5\n\t],\n\t\"./newsFeed/index.scss\": [\n\t\t42,\n\t\t7,\n\t\t13\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 38;\nmodule.exports = webpackAsyncContext;","\r\nexport const routers = [\r\n  {\r\n    exact: true,\r\n    path: '/login',\r\n    component: 'login'\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/',\r\n    component: 'login'\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/newsFeed',\r\n    component: 'newsFeed'\r\n  },\r\n\r\n \r\n]\r\n","import React, { Suspense } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { routers } from './configs'\r\nimport './App.css'\r\n\r\n\r\nconst App = (props) => {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n        <Router>\r\n          <Switch>\r\n            {routers.map((route, idx) => (\r\n              <Route\r\n                key={idx}\r\n                exact={route.exact}\r\n                path={route.path}\r\n                render={() => {\r\n                  const Component = React.lazy(() => import(`./pages/${route.component}`))\r\n                  return <Component />\r\n                }}\r\n              />\r\n            ))}\r\n            <Redirect to='/' />\r\n          </Switch>\r\n        </Router>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import postReducer from './postReducer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst allReducer = combineReducers({\r\n  postReducer\r\n})\r\n\r\nexport default allReducer","\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'setPost':\r\n      state = action.payload\r\n      return state\r\n    case 'loadMore':\r\n      action.payload.map(v => {\r\n        state.push(v)\r\n      })\r\n      state = [...state]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore } from 'redux'\r\n//import reducer\r\nimport allReducer from './reducers'\r\nimport { Provider } from 'react-redux'\r\n\r\nconst store = createStore(allReducer)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}